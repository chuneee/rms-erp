{"ast":null,"code":"import { Response } from 'miragejs';\nimport uniqueId from 'lodash/uniqueId';\nimport isEmpty from 'lodash/isEmpty';\nexport default function authFakeApi(server, apiPrefix) {\n  server.post(`${apiPrefix}/auth/login`, (schema, _ref) => {\n    let {\n      requestBody\n    } = _ref;\n    const {\n      email,\n      password\n    } = JSON.parse(requestBody);\n    const user = schema.db.signInUserData.findBy({\n      email,\n      password\n    });\n\n    if (user) {\n      return {\n        data: {\n          token: 'wVYrxaeNa9OxdnULvde1Au5m5w63'\n        }\n      };\n    }\n\n    return new Response(401, {\n      some: 'header'\n    }, {\n      message: `email: user1@themenate.net | password: 2005ipo`\n    });\n  });\n  server.post(`${apiPrefix}/auth/loginInOAuth`, schema => {\n    return {\n      data: {\n        token: 'wVYrxaeNa9OxdnULvde1Au5m5w63'\n      }\n    };\n  });\n  server.post(`${apiPrefix}/logout`, () => {\n    return true;\n  });\n  server.post(`${apiPrefix}/register`, (schema, _ref2) => {\n    let {\n      requestBody\n    } = _ref2;\n    const {\n      userName,\n      password,\n      email\n    } = JSON.parse(requestBody);\n    const emailUsed = schema.db.signInUserData.findBy({\n      email\n    });\n    const newUser = {\n      userName,\n      email\n    };\n\n    if (!isEmpty(emailUsed)) {\n      const errors = [{\n        message: '',\n        domain: \"global\",\n        reason: \"invalid\"\n      }];\n      return new Response(400, {\n        some: 'header'\n      }, {\n        errors,\n        message: 'User already used'\n      });\n    }\n\n    schema.db.signInUserData.insert({ ...newUser,\n      ...{\n        id: uniqueId('user_'),\n        password,\n        accountUserName: userName\n      }\n    });\n    return {\n      data: {\n        token: 'wVYrxaeNa9OxdnULvde1Au5m5w63'\n      }\n    };\n  });\n}","map":{"version":3,"names":["Response","uniqueId","isEmpty","authFakeApi","server","apiPrefix","post","schema","requestBody","email","password","JSON","parse","user","db","signInUserData","findBy","data","token","some","message","userName","emailUsed","newUser","errors","domain","reason","insert","id","accountUserName"],"sources":["/Users/chune/Documents/RMS Geoespacial/ERP/Emilus - React Admin Template/starter/src/mock/fakeApi/authFakeApi.js"],"sourcesContent":["import { Response } from 'miragejs'\r\nimport uniqueId from 'lodash/uniqueId'\r\nimport isEmpty from 'lodash/isEmpty'\r\n\r\nexport default function authFakeApi (server, apiPrefix) {\r\n    \r\n    server.post(`${apiPrefix}/auth/login`, (schema, {requestBody}) => {\r\n        const { email, password } = JSON.parse(requestBody)\r\n        const user = schema.db.signInUserData.findBy({ email, password })\r\n        if (user) {\r\n            return {\r\n                data: {\r\n                    token: 'wVYrxaeNa9OxdnULvde1Au5m5w63'\r\n                }\r\n            }\r\n        }\r\n        return new Response(401, { some: 'header' }, { message: `email: user1@themenate.net | password: 2005ipo` })\r\n    })\r\n\r\n    server.post(`${apiPrefix}/auth/loginInOAuth`, (schema) => {\r\n        return {\r\n            data: {\r\n                token: 'wVYrxaeNa9OxdnULvde1Au5m5w63'\r\n            }\r\n        }\r\n    })\r\n\r\n    server.post(`${apiPrefix}/logout`, () => {\r\n        return true\r\n    })\r\n\r\n    server.post(`${apiPrefix}/register`, (schema, {requestBody}) => {\r\n        const { userName, password, email } = JSON.parse(requestBody)\r\n        const emailUsed = schema.db.signInUserData.findBy({ email })\r\n        const newUser = {\r\n            userName,\r\n            email,\r\n        }\r\n\r\n        if (!isEmpty(emailUsed)) {\r\n            const errors = [\r\n                {message: '', domain: \"global\", reason: \"invalid\"}\r\n            ]\r\n            return new Response(400, { some: 'header' }, { errors, message: 'User already used' })\r\n        } \r\n\r\n        schema.db.signInUserData.insert({...newUser, ...{id: uniqueId('user_'), password, accountUserName: userName}})\r\n        return {\r\n            data: {\r\n                token: 'wVYrxaeNa9OxdnULvde1Au5m5w63'\r\n            }\r\n        }\r\n    })\r\n}"],"mappings":"AAAA,SAASA,QAAT,QAAyB,UAAzB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,eAAe,SAASC,WAAT,CAAsBC,MAAtB,EAA8BC,SAA9B,EAAyC;EAEpDD,MAAM,CAACE,IAAP,CAAa,GAAED,SAAU,aAAzB,EAAuC,CAACE,MAAD,WAA2B;IAAA,IAAlB;MAACC;IAAD,CAAkB;IAC9D,MAAM;MAAEC,KAAF;MAASC;IAAT,IAAsBC,IAAI,CAACC,KAAL,CAAWJ,WAAX,CAA5B;IACA,MAAMK,IAAI,GAAGN,MAAM,CAACO,EAAP,CAAUC,cAAV,CAAyBC,MAAzB,CAAgC;MAAEP,KAAF;MAASC;IAAT,CAAhC,CAAb;;IACA,IAAIG,IAAJ,EAAU;MACN,OAAO;QACHI,IAAI,EAAE;UACFC,KAAK,EAAE;QADL;MADH,CAAP;IAKH;;IACD,OAAO,IAAIlB,QAAJ,CAAa,GAAb,EAAkB;MAAEmB,IAAI,EAAE;IAAR,CAAlB,EAAsC;MAAEC,OAAO,EAAG;IAAZ,CAAtC,CAAP;EACH,CAXD;EAaAhB,MAAM,CAACE,IAAP,CAAa,GAAED,SAAU,oBAAzB,EAA+CE,MAAD,IAAY;IACtD,OAAO;MACHU,IAAI,EAAE;QACFC,KAAK,EAAE;MADL;IADH,CAAP;EAKH,CAND;EAQAd,MAAM,CAACE,IAAP,CAAa,GAAED,SAAU,SAAzB,EAAmC,MAAM;IACrC,OAAO,IAAP;EACH,CAFD;EAIAD,MAAM,CAACE,IAAP,CAAa,GAAED,SAAU,WAAzB,EAAqC,CAACE,MAAD,YAA2B;IAAA,IAAlB;MAACC;IAAD,CAAkB;IAC5D,MAAM;MAAEa,QAAF;MAAYX,QAAZ;MAAsBD;IAAtB,IAAgCE,IAAI,CAACC,KAAL,CAAWJ,WAAX,CAAtC;IACA,MAAMc,SAAS,GAAGf,MAAM,CAACO,EAAP,CAAUC,cAAV,CAAyBC,MAAzB,CAAgC;MAAEP;IAAF,CAAhC,CAAlB;IACA,MAAMc,OAAO,GAAG;MACZF,QADY;MAEZZ;IAFY,CAAhB;;IAKA,IAAI,CAACP,OAAO,CAACoB,SAAD,CAAZ,EAAyB;MACrB,MAAME,MAAM,GAAG,CACX;QAACJ,OAAO,EAAE,EAAV;QAAcK,MAAM,EAAE,QAAtB;QAAgCC,MAAM,EAAE;MAAxC,CADW,CAAf;MAGA,OAAO,IAAI1B,QAAJ,CAAa,GAAb,EAAkB;QAAEmB,IAAI,EAAE;MAAR,CAAlB,EAAsC;QAAEK,MAAF;QAAUJ,OAAO,EAAE;MAAnB,CAAtC,CAAP;IACH;;IAEDb,MAAM,CAACO,EAAP,CAAUC,cAAV,CAAyBY,MAAzB,CAAgC,EAAC,GAAGJ,OAAJ;MAAa,GAAG;QAACK,EAAE,EAAE3B,QAAQ,CAAC,OAAD,CAAb;QAAwBS,QAAxB;QAAkCmB,eAAe,EAAER;MAAnD;IAAhB,CAAhC;IACA,OAAO;MACHJ,IAAI,EAAE;QACFC,KAAK,EAAE;MADL;IADH,CAAP;EAKH,CArBD;AAsBH"},"metadata":{},"sourceType":"module"}